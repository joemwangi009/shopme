# Cursor Rules

## Instructions

- Record fixes for mistakes or corrections to avoid repetition in the `Lessons` section.
- Organize thoughts and plan steps before starting a task in the `Scratchpad` section.
- Clear old tasks if necessary.
- Use todo markers for progress tracking:
  - `[X]` Completed tasks
  - `[ ]` Pending tasks
- Update Scratchpad after completing subtasks.
- Reflect and plan after milestones for better task management.
- Always refer to Scratchpad before planning the next step.

## Lessons

1. Use `npx shadcn@latest add [component]` instead of `npx shadcn-ui@latest add [component]` when installing Shadcn UI components.
2. In Next.js 14+, page props params must be typed as a Promise. Example:
   ```typescript
   type tParams = Promise<{ id: string }>
   interface PageProps {
     params: tParams
   }
   ```
   Then await the params in the component:
   ```typescript
   export default async function Page(props: PageProps) {
     const { id } = await props.params
   }
   ```
3. Use `const session = await auth()` instead of `const session = await getServerSession(authOptions)` for Next.js authentication. The new `auth()` function is the recommended way to get the session in Next.js Auth v5.
4. When importing `useRouter` from 'next/navigation', the component must be marked as a client component using the `'use client'` directive at the top of the file, as this hook only works on the client side.

## Scratchpad

### 1. Project Setup and Configuration [X]

- [x] Initialize Next.js 15 project with TypeScript
- [x] Set up project structure and folders
- [x] Configure ESLint and Prettier
- [x] Install and configure dependencies:
  - Shadcn UI components
  - Lucide icons
  - Zod for validation
  - Zustand for state management
  - Recharts for analytics
  - Resend for emails
  - Uploadthing for file uploads
  - Prisma ORM
  - PostgreSQL database
  - NextAuth.js beta for authentication
  - Stripe for payments

### 2. Database and Authentication [X]

- [x] Set up PostgreSQL database
- [x] Configure Prisma schema:
  - User model
  - Product model
  - Category model
  - Order model
  - Review model
  - Cart model
- [x] Implement NextAuth.js authentication:
  - Email/Password
  - OAuth providers (Google, GitHub)
  - JWT handling
  - Protected routes

### 3. Core Features - Customer Side [ ]

- [x] Home Layout:
  - Create `(home)` folder in `app` directory
  - Header with logo, search bar, and navigation
  - Footer with links and social media
- [x] Homepage:
  - banner carousel
  - latest products
- [x] Products Catalog:
  - Sidebar with categories and filters
  - Search results
  - Product grid
  - Pagination
- [x] Product pages:
  - Create product detail page layout
  - Implement image gallery with thumbnails
  - Add product information section:
    - Title, price, description
    - Stock status
    - Add to cart button
  - Reviews and ratings section:
    - Display existing reviews
    - Add review form for authenticated users
    - Star rating component
  - Related products section:
    - Show products from same category
    - Product card carousel
- [x] Shopping cart:
  - Add/remove items
  - Update quantities
  - Cart persistence
- [x] Checkout process:
  - Shipping information
  - Payment integration (Stripe)
  - Order confirmation
- [x] User dashboard:
  - Order history
  - Profile management
  - Saved addresses
  - Wishlist

### 4. Admin Dashboard [ ]

- [x] Admin authentication and authorization
- [ ] Dashboard overview:
  - [x] Layout and Structure:
    - [x] Create admin dashboard layout with sidebar navigation
    - [x] Implement responsive grid for dashboard widgets
    - [x] Add loading states and error boundaries
  - [x] Key Metrics Cards:
    - [x] Total revenue widget with real data
    - [x] Total orders widget with real data
    - [x] Total customers widget with real data
    - [x] Average order value widget with real data
  - [x] Sales Analytics:
    - [x] Revenue Chart:
      - [x] Implement line chart using Recharts
      - [x] Add daily/weekly/monthly/yearly filters
      - [x] Show revenue trends over time
      - [x] Add tooltip with detailed information
    - [x] Order Statistics:
      - [x] Bar chart for order volume
      - [x] Order status distribution
      - [x] Peak ordering times
  - [x] Recent Orders Table:
    - [x] Implement data table with columns:
      - [x] Order ID
      - [x] Customer name
      - [x] Order total
      - [x] Status
      - [x] Date
    - [x] Add sorting and filtering
    - [x] Quick actions (view, process, update status)
  - [ ] Low Stock Alerts:
    - Products with stock below threshold
    - Quick restock actions
    - Stock level indicators
  - [ ] Top Products:
    - Best-selling products list
    - Revenue by product
    - Stock status
  - [ ] Customer Insights:
    - New vs returning customers
    - Customer acquisition chart
    - Top customers by revenue
  - [ ] Real-time Updates:
    - Implement WebSocket connection
    - Live order notifications
    - Stock level updates
  - [ ] Export and Reports:
    - CSV/PDF export functionality
    - Custom date range selection
    - Report generation
- [ ] Product management:
  - CRUD operations
  - Bulk actions
  - Image upload (Uploadthing)
- [ ] Order management:
  - Order processing
  - Status updates
  - Refund handling
- [ ] User management:
  - Customer list
  - Admin privileges
  - User actions

### 5. Advanced Features [ ]

- [ ] Real-time notifications
- [ ] Email system (Resend):
  - Order confirmations
  - Shipping updates
  - Password reset
- [ ] Search optimization
- [ ] Performance optimization:
  - Image optimization
  - Caching strategies
  - API optimization
- [ ] Analytics and reporting

### 6. Testing and Deployment [ ]

- [ ] Unit testing
- [ ] Integration testing
- [ ] E2E testing
- [ ] Security audit
- [ ] Production deployment:
  - Environment setup
  - CI/CD pipeline
  - Monitoring
  - Backup strategy

### 7. Documentation [ ]

- [ ] API documentation
- [ ] User guide
- [ ] Admin documentation
- [ ] Deployment guide

## Complete `.env` Template for ShopMe Project

Since there's no `.env.example` file in your project, here's a comprehensive template you should create. Create a new file called `.env` in your project root directory (`C:\Users\Administrator\OneDrive\Documents\ShopMe\ai-amazona\.env`) with the following content:

```env
# Database Configuration
# PostgreSQL connection string (Supabase, Railway, or local PostgreSQL)
DATABASE_URL="postgresql://username:password@localhost:5432/shopme_db"

# NextAuth.js Configuration
# Generate a secure secret: openssl rand -base64 32
NEXTAUTH_SECRET="your-nextauth-secret-key-here"
NEXTAUTH_URL="http://localhost:3000"

# OAuth Providers (Optional - for Google, GitHub, etc.)
# Google OAuth
GOOGLE_CLIENT_ID="your-google-client-id"
GOOGLE_CLIENT_SECRET="your-google-client-secret"

# GitHub OAuth
GITHUB_CLIENT_ID="your-github-client-id"
GITHUB_CLIENT_SECRET="your-github-client-secret"

# Stripe Configuration
# Get from Stripe Dashboard: https://dashboard.stripe.com/apikeys
STRIPE_SECRET_KEY="sk_test_your-stripe-secret-key"
STRIPE_PUBLISHABLE_KEY="pk_test_your-stripe-publishable-key"
STRIPE_WEBHOOK_SECRET="whsec_your-stripe-webhook-secret"

# Resend Email Service
# Get from Resend Dashboard: https://resend.com/api-keys
RESEND_API_KEY="re_your-resend-api-key"

# UploadThing File Upload
# Get from UploadThing Dashboard: https://uploadthing.com/dashboard
UPLOADTHING_SECRET="sk_live_your-uploadthing-secret"
UPLOADTHING_APP_ID="your-uploadthing-app-id"

# Environment
NODE_ENV="development"

# Optional: Analytics (if using Vercel Analytics)
NEXT_PUBLIC_VERCEL_ANALYTICS_ID=""

# Optional: Google Analytics
NEXT_PUBLIC_GA_MEASUREMENT_ID=""
```

## How to Get These Values

### 1. **DATABASE_URL** - PostgreSQL Database
- **Option A: Supabase (Recommended for development)**
  1. Go to [supabase.com](https://supabase.com)
  2. Create a new project
  3. Go to Settings → Database
  4. Copy the connection string from "Connection string" section
  5. Replace `[YOUR-PASSWORD]` with your database password

- **Option B: Railway**
  1. Go to [railway.app](https://railway.app)
  2. Create a new PostgreSQL database
  3. Copy the connection string from the database settings

- **Option C: Local PostgreSQL**
  ```env
  DATABASE_URL="postgresql://username:password@localhost:5432/shopme_db"
  ```

### 2. **NEXTAUTH_SECRET** - Authentication Secret
Generate a secure secret using one of these methods:

**Method A: Using OpenSSL (Recommended)**
```bash
openssl rand -base64 32
```

**Method B: Using Node.js**
```bash
node -e "console.log(require('crypto').randomBytes(32).toString('base64'))"
```

**Method C: Online Generator**
Use [generate-secret.vercel.app](https://generate-secret.vercel.app/32) to generate a 32-character secret.

### 3. **Stripe Keys**
1. Go to [Stripe Dashboard](https://dashboard.stripe.com/apikeys)
2. Create a new account or sign in
3. Copy the **Secret key** (starts with `sk_test_` for test mode)
4. Copy the **Publishable key** (starts with `pk_test_` for test mode)
5. For webhook secret, go to Webhooks → Add endpoint → Copy the signing secret

### 4. **Resend API Key**
1. Go to [Resend Dashboard](https://resend.com/api-keys)
2. Sign up or sign in
3. Create a new API key
4. Copy the key (starts with `re_`)

### 5. **UploadThing Keys**
1. Go to [UploadThing Dashboard](https://uploadthing.com/dashboard)
2. Create a new account or sign in
3. Create a new app
4. Copy the **Secret key** and **App ID**

### 6. **OAuth Providers (Optional)**
If you want to add Google/GitHub authentication:

**Google OAuth:**
1. Go to [Google Cloud Console](https://console.cloud.google.com)
2. Create a new project or select existing
3. Enable Google+ API
4. Go to Credentials → Create Credentials → OAuth 2.0 Client IDs
5. Add authorized redirect URI: `http://localhost:3000/api/auth/callback/google`

**GitHub OAuth:**
1. Go to [GitHub Settings → Developer settings → OAuth Apps](https://github.com/settings/developers)
2. Create a new OAuth App
3. Add callback URL: `http://localhost:3000/api/auth/callback/github`

## Important Security Notes

1. **Never commit your `.env` file to version control**
2. **Use different keys for development and production**
3. **Keep your secrets secure and rotate them regularly**
4. **Use environment-specific URLs** (localhost for dev, your domain for production)

## Next Steps After Creating `.env`

1. **Run database migrations:**
   ```bash
   npx prisma generate
   npx prisma db push
   ```

2. **Seed the database (if you have seed data):**
   ```bash
   npm run db:seed
   ```

3. **Start the development server:**
   ```bash
   npm run dev
   ```

The project should now be properly configured with all the necessary environment variables for the e-commerce functionality including authentication, payments, file uploads, and email services.
